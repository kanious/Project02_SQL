// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResponseAuthenticateAccount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ResponseAuthenticateAccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ResponseAuthenticateAccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ResponseAuthenticateAccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ResponseAuthenticateAccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ResponseAuthenticateAccount_2eproto;
class ResponseAuthenticateAccount;
struct ResponseAuthenticateAccountDefaultTypeInternal;
extern ResponseAuthenticateAccountDefaultTypeInternal _ResponseAuthenticateAccount_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ResponseAuthenticateAccount* Arena::CreateMaybeMessage<::ResponseAuthenticateAccount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ResponseAuthenticateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseAuthenticateAccount) */ {
 public:
  inline ResponseAuthenticateAccount() : ResponseAuthenticateAccount(nullptr) {}
  ~ResponseAuthenticateAccount() override;
  explicit constexpr ResponseAuthenticateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseAuthenticateAccount(const ResponseAuthenticateAccount& from);
  ResponseAuthenticateAccount(ResponseAuthenticateAccount&& from) noexcept
    : ResponseAuthenticateAccount() {
    *this = ::std::move(from);
  }

  inline ResponseAuthenticateAccount& operator=(const ResponseAuthenticateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseAuthenticateAccount& operator=(ResponseAuthenticateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseAuthenticateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseAuthenticateAccount* internal_default_instance() {
    return reinterpret_cast<const ResponseAuthenticateAccount*>(
               &_ResponseAuthenticateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseAuthenticateAccount& a, ResponseAuthenticateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseAuthenticateAccount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseAuthenticateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseAuthenticateAccount* New() const final {
    return new ResponseAuthenticateAccount();
  }

  ResponseAuthenticateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseAuthenticateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseAuthenticateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseAuthenticateAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseAuthenticateAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseAuthenticateAccount";
  }
  protected:
  explicit ResponseAuthenticateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 5,
    kUsernameFieldNumber = 6,
    kLastloginFieldNumber = 7,
    kCreationdateFieldNumber = 8,
    kRequestIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kUserIdFieldNumber = 4,
    kServerIdFieldNumber = 3,
  };
  // required string email = 5;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string username = 6;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string lastlogin = 7;
  bool has_lastlogin() const;
  private:
  bool _internal_has_lastlogin() const;
  public:
  void clear_lastlogin();
  const std::string& lastlogin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastlogin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastlogin();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastlogin();
  void set_allocated_lastlogin(std::string* lastlogin);
  private:
  const std::string& _internal_lastlogin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastlogin(const std::string& value);
  std::string* _internal_mutable_lastlogin();
  public:

  // required string creationdate = 8;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 clientId = 2;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 userId = 4;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 serverId = 3;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ResponseAuthenticateAccount)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastlogin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  friend struct ::TableStruct_ResponseAuthenticateAccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseAuthenticateAccount

// required int32 requestId = 1;
inline bool ResponseAuthenticateAccount::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_requestid() const {
  return _internal_has_requestid();
}
inline void ResponseAuthenticateAccount::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::requestid() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.requestId)
  return _internal_requestid();
}
inline void ResponseAuthenticateAccount::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  requestid_ = value;
}
inline void ResponseAuthenticateAccount::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.requestId)
}

// required int32 clientId = 2;
inline bool ResponseAuthenticateAccount::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_clientid() const {
  return _internal_has_clientid();
}
inline void ResponseAuthenticateAccount::clear_clientid() {
  clientid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::clientid() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.clientId)
  return _internal_clientid();
}
inline void ResponseAuthenticateAccount::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  clientid_ = value;
}
inline void ResponseAuthenticateAccount::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.clientId)
}

// required int32 serverId = 3;
inline bool ResponseAuthenticateAccount::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_serverid() const {
  return _internal_has_serverid();
}
inline void ResponseAuthenticateAccount::clear_serverid() {
  serverid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseAuthenticateAccount::serverid() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.serverId)
  return _internal_serverid();
}
inline void ResponseAuthenticateAccount::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  serverid_ = value;
}
inline void ResponseAuthenticateAccount::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.serverId)
}

// required int64 userId = 4;
inline bool ResponseAuthenticateAccount::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_userid() const {
  return _internal_has_userid();
}
inline void ResponseAuthenticateAccount::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseAuthenticateAccount::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseAuthenticateAccount::userid() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.userId)
  return _internal_userid();
}
inline void ResponseAuthenticateAccount::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  userid_ = value;
}
inline void ResponseAuthenticateAccount::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.userId)
}

// required string email = 5;
inline bool ResponseAuthenticateAccount::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_email() const {
  return _internal_has_email();
}
inline void ResponseAuthenticateAccount::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseAuthenticateAccount::email() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseAuthenticateAccount::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.email)
}
inline std::string* ResponseAuthenticateAccount::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:ResponseAuthenticateAccount.email)
  return _s;
}
inline const std::string& ResponseAuthenticateAccount::_internal_email() const {
  return email_.Get();
}
inline void ResponseAuthenticateAccount::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::release_email() {
  // @@protoc_insertion_point(field_release:ResponseAuthenticateAccount.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseAuthenticateAccount::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseAuthenticateAccount.email)
}

// required string username = 6;
inline bool ResponseAuthenticateAccount::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_username() const {
  return _internal_has_username();
}
inline void ResponseAuthenticateAccount::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResponseAuthenticateAccount::username() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseAuthenticateAccount::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.username)
}
inline std::string* ResponseAuthenticateAccount::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ResponseAuthenticateAccount.username)
  return _s;
}
inline const std::string& ResponseAuthenticateAccount::_internal_username() const {
  return username_.Get();
}
inline void ResponseAuthenticateAccount::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::release_username() {
  // @@protoc_insertion_point(field_release:ResponseAuthenticateAccount.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseAuthenticateAccount::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseAuthenticateAccount.username)
}

// required string lastlogin = 7;
inline bool ResponseAuthenticateAccount::_internal_has_lastlogin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_lastlogin() const {
  return _internal_has_lastlogin();
}
inline void ResponseAuthenticateAccount::clear_lastlogin() {
  lastlogin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResponseAuthenticateAccount::lastlogin() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.lastlogin)
  return _internal_lastlogin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseAuthenticateAccount::set_lastlogin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 lastlogin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.lastlogin)
}
inline std::string* ResponseAuthenticateAccount::mutable_lastlogin() {
  std::string* _s = _internal_mutable_lastlogin();
  // @@protoc_insertion_point(field_mutable:ResponseAuthenticateAccount.lastlogin)
  return _s;
}
inline const std::string& ResponseAuthenticateAccount::_internal_lastlogin() const {
  return lastlogin_.Get();
}
inline void ResponseAuthenticateAccount::_internal_set_lastlogin(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  lastlogin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::_internal_mutable_lastlogin() {
  _has_bits_[0] |= 0x00000004u;
  return lastlogin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::release_lastlogin() {
  // @@protoc_insertion_point(field_release:ResponseAuthenticateAccount.lastlogin)
  if (!_internal_has_lastlogin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return lastlogin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseAuthenticateAccount::set_allocated_lastlogin(std::string* lastlogin) {
  if (lastlogin != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lastlogin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastlogin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseAuthenticateAccount.lastlogin)
}

// required string creationdate = 8;
inline bool ResponseAuthenticateAccount::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResponseAuthenticateAccount::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void ResponseAuthenticateAccount::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ResponseAuthenticateAccount::creationdate() const {
  // @@protoc_insertion_point(field_get:ResponseAuthenticateAccount.creationdate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseAuthenticateAccount::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResponseAuthenticateAccount.creationdate)
}
inline std::string* ResponseAuthenticateAccount::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:ResponseAuthenticateAccount.creationdate)
  return _s;
}
inline const std::string& ResponseAuthenticateAccount::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void ResponseAuthenticateAccount::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000008u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseAuthenticateAccount::release_creationdate() {
  // @@protoc_insertion_point(field_release:ResponseAuthenticateAccount.creationdate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseAuthenticateAccount::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ResponseAuthenticateAccount.creationdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ResponseAuthenticateAccount_2eproto
